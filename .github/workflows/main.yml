name: Docker Build

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  NAME: "aeris1one/light-baseimage"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_arch: [amd64, i386, arm32v7, arm64v8]
        include:
          - target_arch: amd64
            qemu_arch: x86_64
          - target_arch: i386
            qemu_arch: i386
          - target_arch: arm32v7
            qemu_arch: arm
          - target_arch: arm64v8
            qemu_arch: aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - name: Install BATS for tests
      run: |
        curl -o bats.tar.gz -SL https://github.com/bats-core/bats-core/archive/v1.1.0.tar.gz
        mkdir bats-core && tar -xf bats.tar.gz -C bats-core --strip-components=1
        sudo bats-core/install.sh /usr/local

    - name: Prepare Dockerfile for cross-compilation
      run: |
        if [[ "${{ matrix.target_arch }}" != 'amd64' ]]; then
          sed -i "s/FROM debian/FROM ${{ matrix.target_arch }}\/debian/" image/Dockerfile;
          sed -i "/${{ matrix.target_arch }}\/debian/a COPY --from=multiarch/qemu-user-static:latest /usr/bin/qemu-${{ matrix.qemu_arch }}-static /usr/bin/" image/Dockerfile;
        fi
        cat image/Dockerfile

    - name: Set VERSION
      id: version
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          VERSION="stable"
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref }}" | sed -e 's/refs\/tags\/\(.*\)[-v]\(.*\)/\1\2/'
        else
          VERSION="${{ github.ref_name }}-dev"
        fi
        VERSION=$(echo "${VERSION}" | sed 's|/|-|g')
        echo "::set-output name=VERSION::${VERSION}"

    - name: Build Docker image
      run: |
        make build-nocache NAME=${{ env.NAME }} VERSION=${{ steps.version.outputs.VERSION }}-${{ matrix.target_arch }}
        
    - name: Run tests
      run: |
        make test NAME=${{ env.NAME }} VERSION=${{ steps.version.outputs.VERSION }}-${{ matrix.target_arch }}

    - name: Tag Docker image
      run: |
        make tag NAME=${{ env.NAME }} VERSION=${{ steps.version.outputs.VERSION }}-${{ matrix.target_arch }}
        
    - name: Push Docker image
      run: |
        make push NAME=${{ env.NAME }} VERSION=${{ steps.version.outputs.VERSION }}-${{ matrix.target_arch }}
        
  manifest:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - name: Set VERSION
      id: version
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          VERSION="stable"
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref }}" | sed -e 's/refs\/tags\/\(.*\)[-v]\(.*\)/\1\2/'
        else
          VERSION="${{ github.ref_name }}-dev"
        fi
        VERSION=$(echo "${VERSION}" | sed 's|/|-|g')
        echo "::set-output name=VERSION::${VERSION}"

    - name: Create and Push Docker Manifest
      run: |
        docker manifest create ${{ env.NAME }}:${{ steps.version.outputs.VERSION }} \
          ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-amd64 \
          ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-i386 \
          ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-arm32v7 \
          ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-arm64v8
        docker manifest annotate ${{ env.NAME }}:${{ steps.version.outputs.VERSION }} ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-amd64 --os linux --arch amd64
        docker manifest annotate ${{ env.NAME }}:${{ steps.version.outputs.VERSION }} ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-i386 --os linux --arch 386
        docker manifest annotate ${{ env.NAME }}:${{ steps.version.outputs.VERSION }} ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-arm32v7 --os linux --arch arm --variant v7
        docker manifest annotate ${{ env.NAME }}:${{ steps.version.outputs.VERSION }} ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-arm64v8 --os linux --arch arm64 --variant v8
        docker manifest push ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}

    - name: Create and Push Latest Docker Manifest
      if: github.ref == 'refs/heads/main'
      run: |
        docker manifest create ${{ env.NAME }}:latest \
          ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-amd64 \
          ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-i386 \
          ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-arm32v7 \
          ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-arm64v8
        docker manifest annotate ${{ env.NAME }}:latest ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-amd64 --os linux --arch amd64
        docker manifest annotate ${{ env.NAME }}:latest ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-i386 --os linux --arch 386
        docker manifest annotate ${{ env.NAME }}:latest ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-arm32v7 --os linux --arch arm --variant v7
        docker manifest annotate ${{ env.NAME }}:latest ${{ env.NAME }}:${{ steps.version.outputs.VERSION }}-arm64v8 --os linux --arch arm64 --variant v8
        docker manifest push ${{ env.NAME }}:latest
