#!/bin/bash -e

PREFIX=$1
CERT_FILE=$2
KEY_FILE=$3
CA_FILE=$4

echo "cfssl-helper is launched, everybody on the floor !"

if [ -z "$PREFIX" ] || [ -z "$CERT_FILE" ] || [ -z "$KEY_FILE" ] || [ -z "$CA_FILE" ]; then
  echo "Usage: cfssl-helper prefix cert_file key_file ca_file"
  exit 1
fi

if [ ! -e "$CERT_FILE" ] && [ ! -e "$KEY_FILE" ]; then

  echo "No certificate file and certificate key provided, generate:"
  echo "$CERT_FILE and $KEY_FILE"
  echo ""

  # set env vars
  PREFIX=$1
  PREFIX=${PREFIX^^} # uppercase

  # set prefix variable name
  # example : PREFIX_CFSSL_REMOTE='MARIADB_CFSSL_REMOTE'
  PREFIX_CFSSL_REMOTE=${PREFIX}_CFSSL_REMOTE
  PREFIX_CFSSL_REMOTE_HTTPS_CA_CERT=${PREFIX}_CFSSL_REMOTE_HTTPS_CA_CERT
  PREFIX_CFSSL_CA_CERT=${PREFIX}_CFSSL_CA_CERT
  PREFIX_CFSSL_CA_KEY=${PREFIX}_CFSSL_CA_KEY
  PREFIX_CFSSL_CSR=${PREFIX}_CFSSL_CSR
  PREFIX_CFSSL_CSR_JSON=${PREFIX}_CFSSL_CSR_JSON
  PREFIX_CFSSL_CONFIG=${PREFIX}_CFSSL_CONFIG
  PREFIX_CFSSL_CONFIG_JSON=${PREFIX}_CFSSL_CONFIG_JSON
  PREFIX_CFSSL_HOSTNAME=${PREFIX}_CFSSL_HOSTNAME
  PREFIX_CFSSL_PROFILE=${PREFIX}_CFSSL_PROFILE
  PREFIX_CFSSL_LABEL=${PREFIX}_CFSSL_LABEL

  # assign CFSSL_REMOTE=${!PREFIX_CFSSL_REMOTE} if value is not empty otherwise CFSSL_REMOTE=CFSSL_REMOTE
  CFSSL_REMOTE=${!PREFIX_CFSSL_REMOTE:-$CFSSL_REMOTE}
  CFSSL_REMOTE_HTTPS_CA_CERT=${!PREFIX_CFSSL_REMOTE_HTTPS_CA_CERT:-$CFSSL_REMOTE_HTTPS_CA_CERT}
  CFSSL_CA_CERT=${!PREFIX_CFSSL_CA_CERT:-$CFSSL_CA_CERT}
  CFSSL_CA_KEY=${!PREFIX_CFSSL_CA_KEY:-$CFSSL_CA_KEY}
  CFSSL_CSR=${!PREFIX_CFSSL_CSR:-$CFSSL_CSR}
  CFSSL_CSR_JSON=${!PREFIX_CFSSL_CSR_JSON:-$CFSSL_CSR_JSON}
  CFSSL_CONFIG=${!PREFIX_CFSSL_CONFIG:-$CFSSL_CONFIG}
  CFSSL_CONFIG_JSON=${!PREFIX_CFSSL_CONFIG_JSON:-$CFSSL_CONFIG_JSON}
  CFSSL_HOSTNAME=${!PREFIX_CFSSL_HOSTNAME:-$CFSSL_HOSTNAME}
  CFSSL_PROFILE=${!PREFIX_CFSSL_PROFILE:-$CFSSL_PROFILE}
  CFSSL_LABEL=${!PREFIX_CFSSL_LABEL:-$CFSSL_LABEL}

  source ${SERVICE_DIR}/.cfssl/default-env

  # set csr file
  CSR_FILE="/tmp/csr-file"
  if [ -n "$CFSSL_CSR_JSON" ]; then
      echo "use CFSSL_CSR_JSON value as csr file"
      echo $CFSSL_CSR_JSON > $CSR_FILE
  elif [ -n "$CFSSL_CSR" ]; then
    echo "use $CFSSL_CSR as csr file"
    cp -f $CFSSL_CSR $CSR_FILE

    # it's the default csr
    if [ "$CFSSL_CSR" = "$CFSSL_DEFAULT_CSR" ]; then
      sed -i "s|{{ CFSSL_DEFAULT_CA_CSR_CN }}|${CFSSL_DEFAULT_CA_CSR_CN}|g" $CSR_FILE
      sed -i "s|{{ CFSSL_DEFAULT_CA_CSR_KEY_ALGO }}|${CFSSL_DEFAULT_CA_CSR_KEY_ALGO}|g" $CSR_FILE
      sed -i "s|{{ CFSSL_DEFAULT_CA_CSR_KEY_SIZE }}|${CFSSL_DEFAULT_CA_CSR_KEY_SIZE}|g" $CSR_FILE
      sed -i "s|{{ CFSSL_CERT_ORGANIZATION_UNIT }}|${CFSSL_CERT_ORGANIZATION_UNIT}|g" $CSR_FILE
      sed -i "s|{{ CFSSL_DEFAULT_CA_CSR_ORGANIZATION }}|${CFSSL_DEFAULT_CA_CSR_ORGANIZATION}|g" $CSR_FILE
      sed -i "s|{{ CFSSL_DEFAULT_CA_CSR_ORGANIZATION_UNIT }}|${CFSSL_DEFAULT_CA_CSR_ORGANIZATION_UNIT}|g" $CSR_FILE
      sed -i "s|{{ CFSSL_DEFAULT_CA_CSR_LOCATION }}|${CFSSL_DEFAULT_CA_CSR_LOCATION}|g" $CSR_FILE
      sed -i "s|{{ CFSSL_DEFAULT_CA_CSR_STATE }}|${CFSSL_DEFAULT_CA_CSR_STATE}|g" $CSR_FILE
      sed -i "s|{{ CFSSL_DEFAULT_CA_CSR_COUNTRY }}|${CFSSL_DEFAULT_CA_CSR_COUNTRY}|g" $CSR_FILE
    fi
  else
    echo "error: no csr file provided"
    echo "CFSSL_CSR_JSON and CFSSL_CSR are empty"
    exit 1
  fi

  echo ""

  # generate cert
  CONFIG_FILE="/tmp/config-file"
  CERT_NAME="cert"

  REMOTE_PARAM=""
  CA_CERT_PARAM=""
  CA_KEY_PARAM=""
  CONFIG_PARAM=""
  HOSTNAME_PARAM=""
  PROFILE_PARAM=""
  LABEL_PARAM=""

  if [ -n "$CFSSL_REMOTE" ]; then
    REMOTE_PARAM="-remote=$CFSSL_REMOTE"

    # add remote https ca cert to known certificates if not empty
    if [ -n "$CFSSL_REMOTE_HTTPS_CA_CERT" ]; then
      if [ -e "$CFSSL_REMOTE_HTTPS_CA_CERT" ]; then
        [[ ! -d "/etc/ssl/certs/" ]] && mkdir -p /etc/ssl/certs/
        cat $CFSSL_REMOTE_HTTPS_CA_CERT >> /etc/ssl/certs/ca-certificates.crt
      else
        echo "error: remote https ca cert file $CFSSL_REMOTE_HTTPS_CA_CERT not found"
      fi
    fi

  else
    [[ -n "$CFSSL_CA_CERT" ]] && CA_CERT_PARAM="-ca $CFSSL_CA_CERT"
    [[ -n "$CFSSL_CA_KEY" ]] && CA_KEY_PARAM="-ca-key $CFSSL_CA_KEY"
  fi

  if [ -n "$CFSSL_CONFIG_JSON" ]; then
    echo "use CFSSL_CONFIG_JSON value as config file"
    echo $CFSSL_CONFIG_JSON > $CONFIG_FILE
    CONFIG_PARAM="-config $CONFIG_FILE"

    elif [ -n "$CFSSL_CONFIG" ]; then
      echo "use $CFSSL_CONFIG as config file"
      cp -f $CFSSL_CONFIG $CONFIG_FILE
      CONFIG_PARAM="-config $CONFIG_FILE"
  fi

  [[ -n "$CFSSL_HOSTNAME" ]] && HOSTNAME_PARAM="-hostname $CFSSL_HOSTNAME"
  [[ -n "$CFSSL_PROFILE" ]] && PROFILE_PARAM="-profile $CFSSL_PROFILE"
  [[ -n "$CFSSL_LABEL" ]] && LABEL_PARAM="-label $CFSSL_LABEL"

  echo "cfssl gencert $REMOTE_PARAM $CA_CERT_PARAM $CA_KEY_PARAM $CONFIG_PARAM $HOSTNAME_PARAM $PROFILE_PARAM $LABEL_PARAM $CSR_FILE | cfssljson -bare /tmp/$CERT_NAME"
  cfssl gencert $REMOTE_PARAM $CA_CERT_PARAM $CA_KEY_PARAM $CONFIG_PARAM $HOSTNAME_PARAM $PROFILE_PARAM $LABEL_PARAM $CSR_FILE | cfssljson -bare /tmp/$CERT_NAME
  echo ""

  # move generated files
  echo "move /tmp/$CERT_NAME.pem to $CERT_FILE"
  mv /tmp/$CERT_NAME.pem $CERT_FILE

  echo "move /tmp/$CERT_NAME-key.pem to $KEY_FILE"
  mv /tmp/$CERT_NAME-key.pem $KEY_FILE

  # delete tmp files
  rm -f /tmp/$CERT_NAME.csr $CONFIG_FILE $CSR_FILE

  # if ca file don't exists
  if [ ! -e "$CA_FILE" ]; then

    if [ -n "$CFSSL_REMOTE" ]; then
      echo "Get CA certificate from $CFSSL_REMOTE"
      echo "cfssl info $REMOTE_PARAM $CONFIG_PARAM $PROFILE_PARAM $LABEL_PARAM"
      cfssl info $REMOTE_PARAM $CONFIG_PARAM $PROFILE_PARAM $LABEL_PARAM | sed -e "s/.*certificate\":\"\(.*-----\)\".*/\1/g" | sed 's/\\n/\n/g' > $CA_FILE
      echo "CA certificate returned save as $CA_FILE"

    elif [ -n "$CFSSL_CA_CERT" ]; then
      echo "Link $CFSSL_CA_CERT to $CA_FILE"
      ln -s $CFSSL_CA_CERT $CA_FILE
    fi

  fi
  echo "done"

else
  echo "Files $CERT_FILE or $KEY_FILE already exists,"
  echo "do nothing."
fi
