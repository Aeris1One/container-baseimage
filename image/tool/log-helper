#!/bin/bash -e

# log helper base on environment variable LOG_LEVEL
# LOG_LEVEL environment variable is set by run tool based on --log-level argument
# or you can set it directly with docker --env argument

# Usage example: log-helper info LOG_LEVEL is info or more
# the message "LOG_LEVEL is info or more" will be printed only if log level is info, debug or trace

LOG_LEVEL_NONE=0
LOG_LEVEL_ERROR=1
LOG_LEVEL_WARNING=2
LOG_LEVEL_INFO=3
LOG_LEVEL_DEBUG=4
LOG_LEVEL_TRACE=5

# default log level: 3 -> info
LOG_LEVEL=${LOG_LEVEL:-${LOG_LEVEL_INFO}}

CALL=$1 # function to call (error, warning, info, debug, trace, level)
if [[ ! "$CALL" =~ ^(error|warning|info|debug|trace|level)$ ]]; then
  echo "Error: Function $CALL not found"
  echo "Allowed functions are: error, warning, info, debug, trace, level"
  echo "usage example: log-helper info hello !"
  exit 1
fi


MSG="" # message to print if required log level is set
ECHO_PARAM="" # echo command parameters

function error() {
  MSG="$@"

  if [ $LOG_LEVEL -ge 1 ]; then
    [[ -z "$MSG" ]] && getMsgFromStdin || getEchoParam $1
    echo $ECHO_PARAM  "$MSG"
  fi
}

function warning() {
  MSG="$@"

  if [ $LOG_LEVEL -ge 2 ]; then
    [[ -z "$MSG" ]] && getMsgFromStdin || getEchoParam $1
    echo $ECHO_PARAM  "$MSG"
  fi
}

function info() {
  MSG="$@"

  if [ $LOG_LEVEL -ge 3 ]; then
    [[ -z "$MSG" ]] && getMsgFromStdin || getEchoParam $1
    echo $ECHO_PARAM "$MSG"
  fi
}

function debug() {
  MSG="$@"

  if [ $LOG_LEVEL -ge 4 ]; then
    [[ -z "$MSG" ]] && getMsgFromStdin || getEchoParam $1
    echo $ECHO_PARAM "$MSG"
  fi
}

function trace() {
  MSG="$@"

  if [ $LOG_LEVEL -ge 5 ]; then
    [[ -z "$MSG" ]] && getMsgFromStdin || getEchoParam $1
    echo $ECHO_PARAM "$MSG"
  fi
}

function getMsgFromStdin() {
  if [ -z "$2" ]; then
    read MSG
  fi
}

function getEchoParam() {
  if [[ "$1" =~ ^(-e|-n|-E)$ ]]; then
    ECHO_PARAM=$1
    MSG=${MSG#$1 }
  fi
}

function level() {
  local action=$1
  local operator=$2
  local loglevel_str=$3
  local loglevel_str=${loglevel_str^^} # uppercase

  if [  "$action" != "is" ]; then
    echo "Error: Only \"is\" action is supported"
    echo "usage example: log-helper level is eq info"
    exit 1
  fi

  if [[ ! "$operator" =~ ^(eq|ne|gt|ge|lt|le)$ ]]; then
    echo "Error: Operator $operator not allowed"
    echo "Allowed operators are: eq, ne, gt, ge, lt, le"
    echo "Help: http://www.tldp.org/LDP/abs/html/comparison-ops.html"
    exit 1
  fi

  if [ -z "$loglevel_str" ]; then
    echo "Error: No log level provided"
    echo "Allowed log level are: none, error, warning, info, debug, trace"
    echo "usage example: log-helper level is eq info"
    exit 1
  fi

  local loglevel=LOG_LEVEL_$loglevel_str

  if [ ${!loglevel} -$operator $LOG_LEVEL ]; then
    return 0
  else
    return 1
  fi
}

shift
$CALL "$@"

exit 0
